{
  "name": "simple-pubsub",
  "version": "1.0.0",
  "description": "Instructions 1. Build the Publish-Subscribe mechanism. Allow ISubscriber objects to register against an concrete IPublishSubscribService object for an event type. Implement the publish method so that when a publish event occurs, all subscribers of that the event type published will have a chance to handle the event. The subscribers should be working off a shared array of Machine objects, mutating them depending on the event received. 2. Now add the method 'unsubscribe' on IPublishSubscribeService to allow handlers to unsubscribe from events. You may change the existing method signatures. 3. Implement MachineRefillSubscriber. It will increase the stock quantity of the machine. 4. Introduce a new subscriber called LowStockWarningSubscriber. It subscribes to MachineSaleEvents. If a machine stock levels drops below 3 a new Event, LowStockWarningEvent should have a 50% chance of firing, which causes any future MachineSaleEvents to be ignored until the stock goes above 3 (by a MachineRefill event). Think about how you will communicate this information. Remember subscribers should be notified in the order of the events occured.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "npm run build && node build/app.js",
    "start:dev": "nodemon",
    "build": "rimraf ./build && tsc"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thiti-y/simple-pubsub.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/thiti-y/simple-pubsub/issues"
  },
  "homepage": "https://github.com/thiti-y/simple-pubsub#readme",
  "devDependencies": {
    "@types/node": "^18.11.9",
    "nodemon": "^2.0.20",
    "rimraf": "^3.0.2",
    "ts-node": "^10.9.1",
    "typescript": "^4.8.4"
  }
}
